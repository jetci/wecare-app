// app/api/patients/route.ts

import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { withAuth, type AuthenticatedApiHandler } from '@/lib/auth-handler';
import { patientFormSchema } from '@/schemas/community/patient.schema';
import { z } from 'zod';

// [NEW] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏®
const getGenderFromPrefix = (prefix: string): '‡∏ä‡∏≤‡∏¢' | '‡∏´‡∏ç‡∏¥‡∏á' => {
  if (['‡∏ô‡∏≤‡∏¢', '‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢'].includes(prefix)) return '‡∏ä‡∏≤‡∏¢';
  return '‡∏´‡∏ç‡∏¥‡∏á';
};

/**
 * POST /api/patients
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Å‡πà‡∏≠‡∏ô
 */
const createPatient: AuthenticatedApiHandler = async (req, _ctx, session) => {
  const allowedRoles: string[] = ['COMMUNITY', 'OFFICER', 'ADMIN', 'DEVELOPER'];
  if (!allowedRoles.includes(session.role)) {
    return NextResponse.json({ success: false, error: 'Forbidden' }, { status: 403 });
  }

  try {
    const body = await req.json();
    const parsed = patientFormSchema.safeParse(body);
    if (!parsed.success) {
      return NextResponse.json(
        { success: false, error: 'Invalid input data', details: parsed.error.flatten() },
        { status: 400 }
      );
    }
    const data = parsed.data;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á nationalId
    const existing = await prisma.patient.findUnique({ where: { nationalId: data.nationalId } });
    if (existing) {
      return NextResponse.json({ success: false, error: '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' }, { status: 409 });
    }

    const newPatient = await prisma.patient.create({
      data: {
        prefix: data.prefix,
        gender: getGenderFromPrefix(data.prefix),
        firstName: data.firstName,
        lastName: data.lastName,
        nationalId: data.nationalId,

        // @ts-ignore: ensure birthDate property is accepted by Prisma schema
        birthDate: new Date(data.birthDate),
        idCardAddress_houseNumber: data.idCardAddress_houseNumber,
        idCardAddress_moo: data.idCardAddress_moo,
        idCardAddress_tambon: '‡πÄ‡∏ß‡∏µ‡∏¢‡∏á',
        idCardAddress_amphoe: '‡∏ù‡∏≤‡∏á',
        idCardAddress_changwat: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
        idCardAddress_phone: data.idCardAddress_phone,
        useIdCardAddress: data.useIdCardAddress,
        currentAddress_houseNumber: data.useIdCardAddress
          ? data.idCardAddress_houseNumber
          : data.currentAddress_houseNumber,
        currentAddress_moo: data.useIdCardAddress ? data.idCardAddress_moo : data.currentAddress_moo,
        currentAddress_tambon: data.useIdCardAddress ? '‡πÄ‡∏ß‡∏µ‡∏¢‡∏á' : data.currentAddress_tambon,
        currentAddress_amphoe: data.useIdCardAddress ? '‡∏ù‡∏≤‡∏á' : data.currentAddress_amphoe,
        currentAddress_changwat: data.useIdCardAddress ? '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' : data.currentAddress_changwat,
        currentAddress_phone: data.useIdCardAddress ? data.idCardAddress_phone : data.currentAddress_phone,
        patientGroup: data.patientGroup,
        otherPatientGroup: data.patientGroup === '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' ? data.otherPatientGroup : null,
        
        pickupLocation_lat: data.pickupLocation_lat,
        pickupLocation_lng: data.pickupLocation_lng,
        notes: data.notes,
        managedByUserId: session.userId,
      },
    });

    return NextResponse.json({ success: true, patient: newPatient }, { status: 201 });
  } catch (error) {
    console.error('üî• POST /api/patients Error:', error);
    return NextResponse.json({ success: false, error: 'Internal Server Error' }, { status: 500 });
  }
};

export const POST = withAuth(createPatient);

