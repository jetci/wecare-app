datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model User {
  id              String    @id @default(uuid())
  prefix          String?
  firstName       String
  lastName        String
  nationalId      String    @unique
  phone           String?
  houseNumber     String?   // บ้านเลขที่
  village         String?   // หมู่ที่
  subdistrict     String?   // ตำบล
  district        String?   // อำเภอ
  province        String?   // จังหวัด
  avatarUrl       String?   // URL รูปภาพผู้ใช้
  password        String
  role            Role
  position        Position
  approved        Boolean   @default(false)
  createdAt       DateTime  @default(now())

  // Relations
  driverRides     Ride[]    @relation("DriverRides")
  
  managedPatients Patient[] @relation("ManagedPatients")
}

model Patient {
  id                    String   @id @default(uuid())
  prefix                String
  firstName             String
  lastName              String
  nationalId            String   @unique
  gender                String   // added gender field
  bloodType             String?
  birthDate             DateTime

  // ID Card Address
  idCardAddress_houseNumber String
  idCardAddress_moo         String
  idCardAddress_phone       String?

  // Current Address
  useIdCardAddress           Boolean  @default(false)
  currentAddress_houseNumber String?
  currentAddress_moo         String?
  currentAddress_tambon      String?
  currentAddress_amphoe      String?
  currentAddress_changwat    String?
  currentAddress_phone       String?

  // Patient Group
  patientGroup           String
  otherPatientGroup      String?

  // Pickup Location
  pickupLocation_lat      Float
  pickupLocation_lng      Float
  notes                   String?

  // Relations
  managedByUserId        String
  managedByUser          User     @relation("ManagedPatients", fields: [managedByUserId], references: [id])
  rides                  Ride[]   @relation("RidePatient")

  createdAt               DateTime @default(now())
}

model Ride {
  id         String     @id @default(uuid())
  patientId  String
  driverId   String?
  date       DateTime
  status     RideStatus
  rating     Int?
  createdAt  DateTime   @default(now())

  patient   Patient    @relation("RidePatient", fields: [patientId], references: [id])
  driver    User?      @relation("DriverRides", fields: [driverId], references: [id])
}

enum Role {
  DEVELOPER
  COMMUNITY
  DRIVER
  HEALTH_OFFICER
  EXECUTIVE
  ADMIN
}

enum Position {
  COMMUNITY
  DRIVER
  HEALTH_OFFICER
  EXECUTIVE
  ADMIN
}

enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Area {
  id        String   @id @default(uuid())
  province  String
  district  String
  subdistrict String?
  active    Boolean  @default(true)
}

model CaseType {
  id     String @id @default(uuid())
  name   String
}

model NotificationTemplate {
  id      String @id @default(uuid())
  key     String @unique
  message String
}

model Threshold {
  key   String  @id
  value Float
  unit  String
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
}

// Model สำหรับ Community Requests (history)
model RequestUser {
  id          String   @id @default(uuid())
  nationalId  String
  type        String
  status      String
  details     String?  // optional details
  createdAt   DateTime @default(now())
}

// Model สำหรับ Health Officer Appointments
model Appointment {
  id        String   @id @default(uuid())
  area      String
  date      DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
